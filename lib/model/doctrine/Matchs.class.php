<?php

/**
 * Matchs
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Matchs extends BaseMatchs {

    const STATUS_NOT_STARTED = 0;
    const STATUS_STARTING = 1;
    const STATUS_WU_KNIFE = 2;
    const STATUS_KNIFE = 3;
    const STATUS_END_KNIFE = 4;
    const STATUS_WU_1_SIDE = 5;
    const STATUS_FIRST_SIDE = 6;
    const STATUS_WU_2_SIDE = 7;
    const STATUS_SECOND_SIDE = 8;
    const STATUS_WU_OT_1_SIDE = 9;
    const STATUS_OT_FIRST_SIDE = 10;
    const STATUS_WU_OT_2_SIDE = 11;
    const STATUS_OT_SECOND_SIDE = 12;
    const STATUS_END_MATCH = 13;
    const STATUS_ARCHIVE = 14;

    public function getNbRound() {
        return $this->score_a + $this->score_b + 1;
    }

    public function getStatusText() {
        switch ($this->getStatus()) {
            case self::STATUS_NOT_STARTED:
                return "Not started";
            case self::STATUS_STARTING:
                return "Starting";
            case self::STATUS_WU_KNIFE:
                return "Warmup Knife";
            case self::STATUS_KNIFE:
                return "Knife Round";
            case self::STATUS_END_KNIFE:
                return "Waiting choose team";
            case self::STATUS_WU_1_SIDE:
                return "Warmup first side";
            case self::STATUS_FIRST_SIDE:
                return "First side - #" . $this->getNbRound();
            case self::STATUS_WU_2_SIDE:
                return "Warmup second side";
            case self::STATUS_SECOND_SIDE:
                return "Second side - #" . $this->getNbRound();
            case self::STATUS_WU_OT_1_SIDE:
                return "Warmup first side OT";
            case self::STATUS_OT_FIRST_SIDE:
                return "First side OT - #" . $this->getNbRound();
            case self::STATUS_WU_OT_2_SIDE:
                return "Warmup second side OT";
            case self::STATUS_OT_SECOND_SIDE:
                return "Second side OT - #" . $this->getNbRound();
            case self::STATUS_END_MATCH:
                return "Finished";
            case self::STATUS_ARCHIVE:
                return "Archived";
        }
    }

    public function stop($rs = false) {
        $encrypt = new Encryption();
        if (!$rs) {
            $text = $encrypt->encrypt("stopNoRs " . $this->getIp());
        } else {
            $text = $encrypt->encrypt("stop " . $this->getIp());
        }
        
        $sock = @stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }
    
        
    public function pauseUnpause() {
        $encrypt = new Encryption();
        $text = $encrypt->encrypt("pauseunpause " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }

    public function passKnife() {
        $encrypt = new Encryption();
        $text = $encrypt->encrypt("passknife " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }

    public function forceKnife() {
        $encrypt = new \Encryption();
        $text = $encrypt->encrypt("forceknife " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }

    public function forceKnifeEnd() {
        $encrypt = new \Encryption();
        $text = $encrypt->encrypt("forceknifeend " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }

    public function forceStart() {
        $encrypt = new \Encryption();
        $text = $encrypt->encrypt("forcestart " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }
    
    public function stopBack() {
        $encrypt = new \Encryption();
        $text = $encrypt->encrypt("stopback " . $this->getIp());

        $sock = stream_socket_client("udp://" . sfConfig::get("app_ebot_ip") . ":" . sfConfig::get("app_ebot_port"), $errno, $errstr);
        fwrite($sock, "\xFE\xFE\xFE\xFE" . $text . "\xFD\xFD\xFD\xFD");
        fflush($sock);
        fclose($sock);
    }

    public function getRoundSummaries() {
        return RoundSummaryTable::getInstance()->createQuery()->where("match_id = ?", $this->getId())->andWhere("map_id = ?", $this->getMap()->getId())->orderBy("round_id ASC")->execute();
    }

    public function getCurrentPlayers() {
        return PlayersTable::getInstance()
                        ->createQuery()
                        ->where("match_id = ?", $this->getId())
                        ->andWhere("map_id = ?", $this->getMap()->getId())
                        ->andWhere("team IN ?", array(array("a", "b")))
                        ->orderBy("pseudo ASC")
                        ->execute();
    }

    public function getLastRound() {
        return RoundSummaryTable::getInstance()
                        ->createQuery()
                        ->where("match_id = ?", $this->getId())->andWhere("map_id = ?", $this->getMap()->getId())
                        ->orderBy("round_id DESC")
                        ->limit(3)
                        ->execute();
    }

    public function getActionAdmin() {
        if ($this->getStatus() == self::STATUS_NOT_STARTED) {
            return array(
                array("label" => "Démarrer", "route" => "matchs_start", "add_class" => "btn-success"),
                array("label" => "Editer", "route" => "matchs_edit", "add_class" => "btn-primary"),
                array("label" => "Supprimer", "route" => "matchs_delete", "add_class" => "btn-danger")
            );
        }

        if ($this->getStatus() == self::STATUS_END_MATCH) {
            return array(
                array("label" => "Archiver", "route" => "match_put_archive", "add_class" => "btn-info"),
                array("label" => "Supprimer", "route" => "matchs_delete", "add_class" => "btn-danger")
            );
        }

        if ($this->getEnable() == 0) {
            $tab = array();
            if ($this->getServer()->exists()) {
                $tab[] = array("label" => "Relancer", "route" => "matchs_start_retry", "add_class" => "btn-success");
            } else {
                $tab[] = array("label" => "Relancer sur un autre serveur", "route" => "matchs_start", "add_class" => "btn-success");
            }

            $tab[] = array("label" => "Reset", "route" => "matchs_reset", "add_class" => "btn-warning");
            $tab[] = array("label" => "Editer", "route" => "matchs_edit", "add_class" => "btn-primary");
            $tab[] = array("label" => "Supprimer", "route" => "matchs_delete", "add_class" => "btn-danger");

            return $tab;
        }

        $actions = array();
        if (($this->getStatus() >= Matchs::STATUS_WU_KNIFE) && ($this->getStatus() <= Matchs::STATUS_WU_OT_2_SIDE)) {
            $actions[] = array("label" => "Stopper", "route" => "matchs_stop", "add_class" => "btn-danger");
            $actions[] = array("label" => "Stopper avec RS", "route" => "matchs_stop_rs", "add_class" => "btn-danger");
        }

        if ($this->getStatus() == Matchs::STATUS_WU_KNIFE) {
            $actions[] = array("label" => "Passer le knife", "route" => "matchs_pass_knife");
            $actions[] = array("label" => "Forcer le knife", "route" => "matchs_force_knife");
        }

        if ($this->getStatus() == Matchs::STATUS_END_KNIFE) {
            $actions[] = array("label" => "Forcer le passage", "route" => "matchs_force_end_knife");
        }

        if (in_array($this->getStatus(), array(Matchs::STATUS_WU_1_SIDE, Matchs::STATUS_WU_2_SIDE, Matchs::STATUS_WU_OT_1_SIDE, Matchs::STATUS_WU_OT_2_SIDE))) {
            $actions[] = array("label" => "Forcer le démarrage", "route" => "matchs_force_start");
        }
        
        if (in_array($this->getStatus(), array(Matchs::STATUS_FIRST_SIDE, Matchs::STATUS_SECOND_SIDE, Matchs::STATUS_OT_FIRST_SIDE, Matchs::STATUS_OT_SECOND_SIDE))) {
            $actions[] = array("label" => "Stop to warmup", "route" => "matchs_stop_back");
            $actions[] = array("label" => "Pause/Unpause", "route" => "matchs_pause_unpause");
        }

        return $actions;
    }

    public function getCopiedOne()
    {
        $newMatch = $this->copy();

        $newMatch
            ->setTeamA(null)
            ->setTeamAFlag(null)
            ->setTeamB(null)
            ->setTeamBFlag(null)
        ;

        return $newMatch;
    }

}